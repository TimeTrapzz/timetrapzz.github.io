<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>机试第10章</title>
    <url>/2023/03/08/%E6%9C%BA%E8%AF%95%E7%AC%AC10%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="前序遍历序列建二叉树"><a href="#前序遍历序列建二叉树" class="headerlink" title="前序遍历序列建二叉树"></a>前序遍历序列建二叉树</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">string str;</span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode *<span class="title">build</span><span class="params">(string str, <span class="type">int</span> &amp;pos)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">char</span> c = str[pos++];</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'#'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    TreeNode *root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(c);</span><br><span class="line">    root-&gt;lchild = <span class="built_in">build</span>(str, pos);</span><br><span class="line">    root-&gt;rchild = <span class="built_in">build</span>(str, pos);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="根据前序序列和中序序列确定二叉树"><a href="#根据前序序列和中序序列确定二叉树" class="headerlink" title="根据前序序列和中序序列确定二叉树"></a>根据前序序列和中序序列确定二叉树</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode *<span class="title">build</span><span class="params">(<span class="type">int</span> l1, <span class="type">int</span> r1, <span class="type">int</span> l2, <span class="type">int</span> r2, string &amp;pre, string &amp;in)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l1 &gt; r1)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    TreeNode *root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(pre[l1]);</span><br><span class="line">    <span class="type">int</span> pos = in.<span class="built_in">find</span>(pre[l1]);</span><br><span class="line">    root-&gt;lchild = <span class="built_in">build</span>(l1 + <span class="number">1</span>, l1 + pos + <span class="number">1</span>, l2, pos - <span class="number">1</span>, pre, in);</span><br><span class="line">    root-&gt;rchild = <span class="built_in">build</span>(l1 + pos + <span class="number">2</span>, r1, pos + <span class="number">1</span>, r2, pre, in);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode *<span class="title">make</span><span class="params">(string &amp;pre, string &amp;in)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">build</span>(<span class="number">0</span>, pre.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="number">0</span>, in.<span class="built_in">size</span>() - <span class="number">1</span>, pre, in);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="二叉排序树建树"><a href="#二叉排序树建树" class="headerlink" title="二叉排序树建树"></a>二叉排序树建树</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode *<span class="title">insert</span><span class="params">(TreeNode *root, <span class="type">int</span> val, <span class="type">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (!root)</span><br><span class="line">    {</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        cout &lt;&lt; father &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; root-&gt;val)</span><br><span class="line">        root-&gt;lchild = <span class="built_in">insert</span>(root-&gt;lchild, val, root-&gt;val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        root-&gt;rchild = <span class="built_in">insert</span>(root-&gt;rchild, val, root-&gt;val);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="判断两棵树是否相同"><a href="#判断两棵树是否相同" class="headerlink" title="判断两棵树是否相同"></a>判断两棵树是否相同</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEqual</span><span class="params">(TreeNode *x, TreeNode *y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">nullptr</span> &amp;&amp; y == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> ((x == <span class="literal">nullptr</span> &amp;&amp; y != <span class="literal">nullptr</span>) || (x != <span class="literal">nullptr</span> &amp;&amp; y == <span class="literal">nullptr</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;val != y-&gt;val)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isEqual</span>(x-&gt;lchild, y-&gt;lchild) &amp;&amp; <span class="built_in">isEqual</span>(x-&gt;rchild, y-&gt;rchild);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="哈夫曼树最小带权路径长度和"><a href="#哈夫曼树最小带权路径长度和" class="headerlink" title="哈夫曼树最小带权路径长度和"></a>哈夫曼树最小带权路径长度和</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q; <span class="comment">// 小根堆</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> a = q.<span class="built_in">top</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="type">int</span> b = q.<span class="built_in">top</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    res += a + b;</span><br><span class="line">    q.<span class="built_in">push</span>(a + b);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="哈夫曼树建树及哈夫曼编码"><a href="#哈夫曼树建树及哈夫曼编码" class="headerlink" title="哈夫曼树建树及哈夫曼编码"></a>哈夫曼树建树及哈夫曼编码</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(TreeNode *lhs, TreeNode *rhs)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> lhs-&gt;val &gt; rhs-&gt;val;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">string tmp;</span><br><span class="line">vector&lt;string&gt; res;</span><br><span class="line">unordered_map&lt;TreeNode *, <span class="type">int</span>&gt; mp; <span class="comment">// 给每个节点赋序号</span></span><br><span class="line">priority_queue&lt;TreeNode *, vector&lt;TreeNode *&gt;, cmp&gt; q;</span><br><span class="line">res.<span class="built_in">resize</span>(q.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> <span class="comment">// 建树</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        TreeNode *a = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        TreeNode *b = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        TreeNode *root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(a-&gt;val + b-&gt;val);</span><br><span class="line">        root-&gt;lchild = a, root-&gt;rchild = b;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(TreeNode *root)</span> <span class="comment">// 编码</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (!root)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!root-&gt;lchild &amp;&amp; !root-&gt;rchild)</span><br><span class="line">    {</span><br><span class="line">        res[mp[root]] = tmp;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    tmp += <span class="string">"0"</span>;</span><br><span class="line">    <span class="built_in">solve</span>(root-&gt;lchild);</span><br><span class="line">    tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">    tmp += <span class="string">"1"</span>;</span><br><span class="line">    <span class="built_in">solve</span>(root-&gt;rchild);</span><br><span class="line">    tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第11章</title>
    <url>/2023/03/08/%E6%9C%BA%E8%AF%95%E7%AC%AC11%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> fa[MAXN], h[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        fa[i] = i, h[i] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (x != fa[x])</span><br><span class="line">        fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uni</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x != y)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (h[x] &lt; h[y])</span><br><span class="line">            fa[x] = y;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (h[x] &gt; h[y])</span><br><span class="line">            fa[y] = x;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            h[x]++;</span><br><span class="line">            fa[y] = x;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="判断无向图是否连通"><a href="#判断无向图是否连通" class="headerlink" title="判断无向图是否连通"></a>判断无向图是否连通</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isConnected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>; <span class="comment">// 连通分量个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(i) == i)</span><br><span class="line">            cnt++;</span><br><span class="line">    <span class="keyword">return</span> cnt == <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="判断有向图是否为树"><a href="#判断有向图是否为树" class="headerlink" title="判断有向图是否为树"></a>判断有向图是否为树</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> degree[MAXN]; <span class="comment">// 入度，在union时改变</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        degree[i] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXN; ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (fa[i] == i)</span><br><span class="line">            cnt++;</span><br><span class="line">        <span class="keyword">if</span> (degree[i] == <span class="number">0</span>)</span><br><span class="line">            root++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (degree[i] &gt; <span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (cnt != <span class="number">1</span> || root != <span class="number">1</span>)</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">0</span> || root == <span class="number">0</span>)</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="最小生成树Kruskal算法"><a href="#最小生成树Kruskal算法" class="headerlink" title="最小生成树Kruskal算法"></a>最小生成树Kruskal算法</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> s, e, w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> edge &amp;e) <span class="type">const</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> w &lt; e.w;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">edge edges[MAXN * MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kruskal</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">init</span>(n); <span class="comment">// 初始化并查集</span></span><br><span class="line">    <span class="built_in">sort</span>(edges, edges + len);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    {</span><br><span class="line">        edge cur = edges[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(cur.s) != <span class="built_in">find</span>(cur.e))</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">uni</span>(cur.s, cur.e);</span><br><span class="line">            res += cur.w;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><p>明天再写zzz</p>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第12章</title>
    <url>/2023/03/08/%E6%9C%BA%E8%AF%95%E7%AC%AC12%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="最大连续子序列和"><a href="#最大连续子序列和" class="headerlink" title="最大连续子序列和"></a>最大连续子序列和</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">10000</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[MAXN], dp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    {</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(a[i], dp[i - <span class="number">1</span>] + a[i]);</span><br><span class="line">        res = <span class="built_in">max</span>(res, dp[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> a[MAXN], dp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    {</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">        res = <span class="built_in">max</span>(res, dp[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="最大上升子序列和"><a href="#最大上升子序列和" class="headerlink" title="最大上升子序列和"></a>最大上升子序列和</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> a[MAXN], dp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    {</span><br><span class="line">        dp[i] = a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + a[i]);</span><br><span class="line">        res = <span class="built_in">max</span>(res, dp[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> dp[MAXN][MAXN];</span><br><span class="line"><span class="type">char</span> s1[MAXN], s2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s1[i] == s2[j])</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> dp[n][m];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h3><p><strong>每种物品至多只能选择1件。</strong><code>dp[i][j]</code>表示前 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 个物品装进容量为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="0.932ex" height="1.957ex" role="img" focusable="false" viewBox="0 -661 412 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></svg></mjx-container> 的背包能获得的最大价值。<code>dp[i][j]</code>的转移仅与<code>dp[i-1][j]</code>和<code>dp[i-1][j-w[i]]</code>有关，可简化为<code>dp[j]</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> n, m; <span class="comment">// 物品个数，背包容量</span></span><br><span class="line"><span class="type">int</span> dp[MAXN];</span><br><span class="line"><span class="type">int</span> v[MAXN], w[MAXN]; <span class="comment">// 价值，重量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">        dp[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= w[i]; --j)</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - w[i]] + v[i]);</span><br><span class="line">    <span class="keyword">return</span> dp[m];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p><strong>每个物品可以选择多件。</strong> 与0-1背包相比，仅更新dp数组时遍历顺序发生改变。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> n, m; <span class="comment">// 物品个数，背包容量</span></span><br><span class="line"><span class="type">int</span> dp[MAXN];</span><br><span class="line"><span class="type">int</span> v[MAXN], w[MAXN]; <span class="comment">// 价值，重量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">        dp[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = w[i]; j &lt;= m; ++j)</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - w[i]] + v[i]);</span><br><span class="line">    <span class="keyword">return</span> dp[m];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p><strong>每种物品最多选k件。</strong> 转化为0-1背包问题求解。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> dp[MAXN];</span><br><span class="line"><span class="type">int</span> v[MAXN], w[MAXN], k[MAXN];</span><br><span class="line"><span class="type">int</span> value[MAXN], weight[MAXN]; <span class="comment">// 分解后的价值，质量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    {</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; k[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k[i]; j &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            value[num] = v[i] * j;</span><br><span class="line">            weight[num] = w[i] * j;</span><br><span class="line">            num++;</span><br><span class="line">            k[i] -= j;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (k[i] &gt; <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            value[num] = v[i] * k[i];</span><br><span class="line">            weight[num] = w[i] * k[i];</span><br><span class="line">            num++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">        dp[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= weight[i]; --j)</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">    <span class="keyword">return</span> dp[m];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第2章</title>
    <url>/2023/03/06/%E6%9C%BA%E8%AF%95%E7%AC%AC2%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="反序数"><a href="#反序数" class="headerlink" title="反序数"></a>反序数</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    {</span><br><span class="line">        res *= <span class="number">10</span>;</span><br><span class="line">        res += x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="闰年判断"><a href="#闰年判断" class="headerlink" title="闰年判断"></a>闰年判断</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> d1[<span class="number">13</span>] = {<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>};</span><br><span class="line"><span class="type">int</span> d2[<span class="number">13</span>] = {<span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isLeapYear</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> (n % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">0</span>) || (n % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="日期格式化输出yyyy-mm-dd"><a href="#日期格式化输出yyyy-mm-dd" class="headerlink" title="日期格式化输出yyyy-mm-dd"></a>日期格式化输出yyyy-mm-dd</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%04d-%02d-%02d"</span>, y, m, d);</span><br></pre></td></tr></table></figure></div>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <tags>
        <tag>机试</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第3章</title>
    <url>/2023/03/07/%E6%9C%BA%E8%AF%95%E7%AC%AC3%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="快速排序-quicksort"><a href="#快速排序-quicksort" class="headerlink" title="快速排序(quicksort)"></a>快速排序(quicksort)</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> mid = a[(l + r) / <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> i = l, j = r;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">while</span> (a[i] &lt; mid)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">while</span> (a[j] &gt; mid)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= j)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">swap</span>(a[i], a[j]);</span><br><span class="line">            i++, j--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (i &lt; r)</span><br><span class="line">        <span class="built_in">quicksort</span>(a, i, r);</span><br><span class="line">    <span class="keyword">if</span> (l &lt; j)</span><br><span class="line">        <span class="built_in">quicksort</span>(a, l, j);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="结构体排序"><a href="#结构体排序" class="headerlink" title="结构体排序"></a>结构体排序</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> student &amp;a, <span class="type">const</span> student &amp;b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (a.x == b.x)</span><br><span class="line">        <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> n, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &lt; target)</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &gt; target)</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">lower_bound</span>(begin, end, val); <span class="comment">// 返回大于等于val的地址</span></span><br><span class="line"><span class="built_in">upper_bound</span>(begin, end, val); <span class="comment">// 返回大于val的地址</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>排序和查找</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第4章</title>
    <url>/2023/03/07/%E6%9C%BA%E8%AF%95%E7%AC%AC4%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="string常用操作"><a href="#string常用操作" class="headerlink" title="string常用操作"></a>string常用操作</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">s.<span class="built_in">insert</span>(idx, str);</span><br><span class="line">s.<span class="built_in">erase</span>(begin, end); <span class="comment">// 删除[begin, end)</span></span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line">s.<span class="built_in">substr</span>(idx, len); <span class="comment">// 起始位置，长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">find</span>(str) != string::npos)</span><br></pre></td></tr></table></figure></div>

<h2 id="浮点数加法（类似大数加法）"><a href="#浮点数加法（类似大数加法）" class="headerlink" title="浮点数加法（类似大数加法）"></a>浮点数加法（类似大数加法）</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">add</span><span class="params">(string s1, string s2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    string int1 = s1.<span class="built_in">substr</span>(<span class="number">0</span>, s1.<span class="built_in">find</span>(<span class="string">'.'</span>)), int2 = s2.<span class="built_in">substr</span>(<span class="number">0</span>, s2.<span class="built_in">find</span>(<span class="string">'.'</span>));</span><br><span class="line">    string frac1 = s1.<span class="built_in">substr</span>(s1.<span class="built_in">find</span>(<span class="string">'.'</span>) + <span class="number">1</span>), frac2 = s2.<span class="built_in">substr</span>(s2.<span class="built_in">find</span>(<span class="string">'.'</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (int1.<span class="built_in">size</span>() &lt; int2.<span class="built_in">size</span>())</span><br><span class="line">        int1 = <span class="built_in">string</span>(int2.<span class="built_in">size</span>() - int1.<span class="built_in">size</span>(), <span class="string">'0'</span>) + int1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        int2 = <span class="built_in">string</span>(int1.<span class="built_in">size</span>() - int2.<span class="built_in">size</span>(), <span class="string">'0'</span>) + int2;</span><br><span class="line">    <span class="keyword">if</span> (frac1.<span class="built_in">size</span>() &lt; frac2.<span class="built_in">size</span>())</span><br><span class="line">        frac1 = frac1 + <span class="built_in">string</span>(frac2.<span class="built_in">size</span>() - frac1.<span class="built_in">size</span>(), <span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        frac2 = frac2 + <span class="built_in">string</span>(frac1.<span class="built_in">size</span>() - frac2.<span class="built_in">size</span>(), <span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    string fraction = <span class="built_in">string</span>(frac1.<span class="built_in">size</span>(), <span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = fraction.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> cur = frac1[i] - <span class="string">'0'</span> + frac2[i] - <span class="string">'0'</span> + carry;</span><br><span class="line">        carry = cur / <span class="number">10</span>;</span><br><span class="line">        fraction[i] = cur % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">    }</span><br><span class="line">    string integer = <span class="built_in">string</span>(int1.<span class="built_in">size</span>(), <span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = integer.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> cur = int1[i] - <span class="string">'0'</span> + int2[i] - <span class="string">'0'</span> + carry;</span><br><span class="line">        carry = cur / <span class="number">10</span>;</span><br><span class="line">        integer[i] = cur % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (carry == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'1'</span> + integer + <span class="string">'.'</span> + fraction;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> integer + <span class="string">'.'</span> + fraction;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="kmp算法"><a href="#kmp算法" class="headerlink" title="kmp算法"></a>kmp算法</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> s[MAXN], t[MAXM];</span><br><span class="line"><span class="type">int</span> nxt[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getnxt</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    nxt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; m)</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || t[i] == t[j])</span><br><span class="line">            nxt[++i] = ++j;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = nxt[j];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kmp</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">getnxt</span>(m);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == t[j])</span><br><span class="line">        {</span><br><span class="line">            i++, j++;</span><br><span class="line">            <span class="keyword">if</span> (j == m)</span><br><span class="line">                <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = nxt[j];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第5章</title>
    <url>/2023/03/07/%E6%9C%BA%E8%AF%95%E7%AC%AC5%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="约瑟夫问题变体（队列解法）"><a href="#约瑟夫问题变体（队列解法）" class="headerlink" title="约瑟夫问题变体（队列解法）"></a>约瑟夫问题变体（队列解法）</h2><p>用队列模拟循环队列</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, p, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; p &gt;&gt; m;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    q.<span class="built_in">push</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; p; ++i) <span class="comment">// 让p号位于队首</span></span><br><span class="line">{</span><br><span class="line">    q.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">    {</span><br><span class="line">        q.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (q.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="括号匹配（栈）"><a href="#括号匹配（栈）" class="headerlink" title="括号匹配（栈）"></a>括号匹配（栈）</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; stk;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">'('</span>)</span><br><span class="line">            stk.<span class="built_in">push</span>(<span class="string">'('</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">')'</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (!stk.<span class="built_in">empty</span>())</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="简易计算器（栈）"><a href="#简易计算器（栈）" class="headerlink" title="简易计算器（栈）"></a>简易计算器（栈）</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; pri;</span><br><span class="line">pri[<span class="string">'#'</span>] = <span class="number">0</span>;</span><br><span class="line">pri[<span class="string">'$'</span>] = <span class="number">1</span>;</span><br><span class="line">pri[<span class="string">'+'</span>] = pri[<span class="string">'-'</span>] = <span class="number">2</span>;</span><br><span class="line">pri[<span class="string">'*'</span>] = pri[<span class="string">'/'</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">stack&lt;<span class="type">char</span>&gt; op;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; num;</span><br><span class="line">string str;</span><br><span class="line">str += <span class="string">'$'</span>;</span><br><span class="line">op.<span class="built_in">push</span>(<span class="string">'#'</span>);</span><br><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (idx &lt; str.<span class="built_in">size</span>())</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (str[idx] == <span class="string">' '</span>)</span><br><span class="line">        idx++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(str[idx]))</span><br><span class="line">        num.<span class="built_in">push</span>(<span class="built_in">getnum</span>(str, idx));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (pri[op.<span class="built_in">top</span>()]) &lt; pri[str[idx]])</span><br><span class="line">            {</span><br><span class="line">                op.<span class="built_in">push</span>(str[idx]);</span><br><span class="line">                idx++;</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="type">double</span> y = num.<span class="built_in">top</span>();</span><br><span class="line">            num.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">double</span> x = num.<span class="built_in">top</span>();</span><br><span class="line">            num.<span class="built_in">pop</span>();</span><br><span class="line">            num.<span class="built_in">push</span>(<span class="built_in">cal</span>(x, y, op.<span class="built_in">top</span>()));</span><br><span class="line">            op.<span class="built_in">pop</span>();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第6章</title>
    <url>/2023/03/07/%E6%9C%BA%E8%AF%95%E7%AC%AC6%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="大整数加法"><a href="#大整数加法" class="headerlink" title="大整数加法"></a>大整数加法</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">add</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (a.<span class="built_in">size</span>() &gt; b.<span class="built_in">size</span>())</span><br><span class="line">        a = <span class="built_in">string</span>(a.<span class="built_in">size</span>() - b.<span class="built_in">size</span>(), <span class="string">'0'</span>) + a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b = <span class="built_in">string</span>(b.<span class="built_in">size</span>() - a.<span class="built_in">size</span>(), <span class="string">'0'</span>) + b;</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="function">string <span class="title">res</span><span class="params">(a.size(), <span class="string">' '</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = res.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> cur = a[i] - <span class="string">'0'</span> + b[i] - <span class="string">'0'</span> + carry;</span><br><span class="line">        res[i] = cur % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">        carry = cur / <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (carry)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'1'</span> + res;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="大整数乘法"><a href="#大整数乘法" class="headerlink" title="大整数乘法"></a>大整数乘法</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">mul</span><span class="params">(string str, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">string <span class="title">res</span><span class="params">(str.size(), <span class="string">' '</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = res.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> cur = (str[i] - <span class="string">'0'</span>) * x + carry;</span><br><span class="line">        str[i] = cur / <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">        carry = cur % <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (carry)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">to_string</span>(carry) + res;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">mul</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    string res = <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> x = b[b.<span class="built_in">size</span>() - <span class="number">1</span> - i] - <span class="string">'0'</span>;</span><br><span class="line">        string cur = <span class="built_in">mul</span>(a, x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++i)</span><br><span class="line">            cur = <span class="built_in">mul</span>(cur, <span class="number">10</span>);</span><br><span class="line">        res = <span class="built_in">add</span>(res, cur);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="大整数除法"><a href="#大整数除法" class="headerlink" title="大整数除法"></a>大整数除法</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">divide</span><span class="params">(string str, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> remainder = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> cur = remainder * <span class="number">10</span> + str[i] - <span class="string">'0'</span>;</span><br><span class="line">        str[i] = cur / x + <span class="string">'0'</span>;</span><br><span class="line">        remainder = cur % x;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (str[pos] == <span class="string">'0'</span>)</span><br><span class="line">        pos++;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="built_in">substr</span>(pos);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a * b / <span class="built_in">gcd</span>(a, b);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pri;</span><br><span class="line"><span class="type">int</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            pri.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; pri.<span class="built_in">size</span>(); ++j)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1ll</span> * i * pri[j] &gt; n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            vis[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % pri[j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; factor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pri.<span class="built_in">size</span>() &amp;&amp; pri[i] &lt; n; ++i)</span><br><span class="line">    <span class="keyword">while</span> (n % pri[i] == <span class="number">0</span>)</span><br><span class="line">        factor.<span class="built_in">push_back</span>(pri[i]);</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">    factor.<span class="built_in">push_back</span>(n);</span><br></pre></td></tr></table></figure></div>

<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">114514</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            res = res * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a % MOD;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">} </span><br></pre></td></tr></table></figure></div>

<h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">matrix <span class="title">fpow</span><span class="params">(matrix x, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">mat <span class="title">res</span><span class="params">(x.row, x.col)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.row; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; res.col; ++j)</span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">                res.mat[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res.mat[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="built_in">mul</span>(res, k);</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        x = <span class="built_in">mul</span>(x, x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="判断大整数是否可被整除"><a href="#判断大整数是否可被整除" class="headerlink" title="判断大整数是否可被整除"></a>判断大整数是否可被整除</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isDividable</span><span class="params">(string str, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    {</span><br><span class="line">        total *= <span class="number">10</span>;</span><br><span class="line">        total += str[i] - <span class="string">'0'</span>;</span><br><span class="line">        total %= k;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> total == <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第7章</title>
    <url>/2023/03/08/%E6%9C%BA%E8%AF%95%E7%AC%AC7%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="活动安排（区间贪心）"><a href="#活动安排（区间贪心）" class="headerlink" title="活动安排（区间贪心）"></a>活动安排（区间贪心）</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(activity x, activity y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> x.e &lt; y.e; <span class="comment">// 按结束时间排序</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(arr, arr + n, cmp);</span><br><span class="line"><span class="type">int</span> cur = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    <span class="keyword">if</span> (cur &lt;= arr[i].s)</span><br><span class="line">    {</span><br><span class="line">        cur = arr[i].e;</span><br><span class="line">        res++;</span><br><span class="line">    }</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第8章</title>
    <url>/2023/03/08/%E6%9C%BA%E8%AF%95%E7%AC%AC8%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="汉诺塔变种（递归）"><a href="#汉诺塔变种（递归）" class="headerlink" title="汉诺塔变种（递归）"></a>汉诺塔变种（递归）</h2><p>每次只允许将圆盘移到中间杆上或从中间杆上移出，不允许直接将圆盘从第一根杆上移到第二根杆上，或直接将圆盘从第三根杆上移到第一根杆上。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">// f[1] = 2, f[i] = 3 * f[i - 1] + 2</span></span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="params">(n == <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">return</span> 2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> * <span class="built_in">solve</span>(n - <span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="杨辉三角（递归）"><a href="#杨辉三角（递归）" class="headerlink" title="杨辉三角（递归）"></a>杨辉三角（递归）</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">1</span> || c == <span class="number">1</span> || r == c)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">solve</span>(r - <span class="number">1</span>, c - <span class="number">1</span>) + <span class="built_in">solve</span>(r - <span class="number">1</span>, c);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="type">int</span> vis[MAXN];</span><br><span class="line"><span class="type">char</span> res[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="built_in">strlen</span>(s))</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(res); ++i)</span><br><span class="line">            cout &lt;&lt; res[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">        {</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            res[cnt] = s[i];</span><br><span class="line">            <span class="built_in">solve</span>(s, cnt + <span class="number">1</span>);</span><br><span class="line">            vis[i] = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="计算二叉树子树节点个数"><a href="#计算二叉树子树节点个数" class="headerlink" title="计算二叉树子树节点个数"></a>计算二叉树子树节点个数</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (m &gt; n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    res += <span class="built_in">solve</span>(n, <span class="number">2</span> * m);</span><br><span class="line">    res += <span class="built_in">solve</span>(n, <span class="number">2</span> * m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="分解2的幂次方"><a href="#分解2的幂次方" class="headerlink" title="分解2的幂次方"></a>分解2的幂次方</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">    <span class="type">int</span> exp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>)</span><br><span class="line">            p.<span class="built_in">push</span>(exp);</span><br><span class="line">        exp++;</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">    string res = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span> (!p.<span class="built_in">empty</span>())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (p.<span class="built_in">top</span>() == <span class="number">0</span>)</span><br><span class="line">            res += <span class="string">"2(0)"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p.<span class="built_in">top</span>() == <span class="number">1</span>)</span><br><span class="line">            res += <span class="string">"2"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res += <span class="string">"2("</span> + <span class="built_in">solve</span>(p.<span class="built_in">top</span>()) + <span class="string">")"</span>;</span><br><span class="line">        p.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (!p.<span class="built_in">empty</span>())</span><br><span class="line">            res += <span class="string">"+"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>递归和分治</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第9章</title>
    <url>/2023/03/08/%E6%9C%BA%E8%AF%95%E7%AC%AC9%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="Catch-That-Cow-BFS"><a href="#Catch-That-Cow-BFS" class="headerlink" title="Catch That Cow(BFS)"></a>Catch That Cow(BFS)</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span>;</span><br><span class="line"><span class="type">int</span> step[MAXN], vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(n);</span><br><span class="line">    step[n] = <span class="number">0</span>;</span><br><span class="line">    vis[n] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> cur, nxt;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    {</span><br><span class="line">        cur = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                nxt = cur + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">                nxt = cur - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nxt = <span class="number">2</span> * cur;</span><br><span class="line">            <span class="keyword">if</span> (nxt &lt; <span class="number">0</span> || nxt &gt;= MAXN)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!vis[nxt])</span><br><span class="line">            {</span><br><span class="line">                q.<span class="built_in">push</span>(nxt);</span><br><span class="line">                vis[nxt] = <span class="number">1</span>;</span><br><span class="line">                step[nxt] = step[cur] + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (nxt == k)</span><br><span class="line">                <span class="keyword">return</span> step[nxt];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="A-Knight’s-Journey-DFS"><a href="#A-Knight’s-Journey-DFS" class="headerlink" title="A Knight’s Journey(DFS)"></a>A Knight’s Journey(DFS)</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> p, q; <span class="comment">// 棋盘参数</span></span><br><span class="line"><span class="type">bool</span> vis[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> dir[<span class="number">8</span>][<span class="number">2</span>] = {{<span class="number">-1</span>, <span class="number">-2</span>}, {<span class="number">1</span>, <span class="number">-2</span>}, {<span class="number">-2</span>, <span class="number">-1</span>}, {<span class="number">2</span>, <span class="number">-1</span>}, {<span class="number">-2</span>, <span class="number">1</span>}, {<span class="number">2</span>, <span class="number">1</span>}, {<span class="number">-1</span>, <span class="number">2</span>}, {<span class="number">1</span>, <span class="number">2</span>}};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> step, string res)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (step == p * q)</span><br><span class="line">    {</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> nx = x + dir[i][<span class="number">0</span>], ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= p || ny &lt; <span class="number">0</span> || ny &gt;= q || vis[nx][ny])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">char</span> r = nx + <span class="string">'1'</span>, c = ny + <span class="string">'A'</span>;</span><br><span class="line">        vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(nx, ny, step + <span class="number">1</span>, res + c + r))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        vis[nx][ny] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="八皇后"><a href="#八皇后" class="headerlink" title="八皇后"></a>八皇后</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> res = <span class="number">0</span>, n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> cnt, vector&lt;<span class="type">int</span>&gt; &amp;vis)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (cnt == n + <span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; tmp.<span class="built_in">size</span>(); ++j)</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(i - j) == <span class="built_in">abs</span>(tmp[i] - tmp[j]))</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">        res++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">        {</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            tmp.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">solve</span>(cnt + <span class="number">1</span>, vis);</span><br><span class="line">            tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">            vis[i] = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
</search>
