<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>机试第2章</title>
    <url>/2023/03/06/%E6%9C%BA%E8%AF%95%E7%AC%AC2%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="反序数"><a href="#反序数" class="headerlink" title="反序数"></a>反序数</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        res *= <span class="number">10</span>;</span><br><span class="line">        res += x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="闰年判断"><a href="#闰年判断" class="headerlink" title="闰年判断"></a>闰年判断</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> d1[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"><span class="type">int</span> d2[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isLeapYear</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">0</span>) || (n % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="日期格式化输出yyyy-mm-dd"><a href="#日期格式化输出yyyy-mm-dd" class="headerlink" title="日期格式化输出yyyy-mm-dd"></a>日期格式化输出yyyy-mm-dd</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%04d-%02d-%02d&quot;</span>, y, m, d);</span><br></pre></td></tr></table></figure></div>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <tags>
        <tag>机试</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第3章</title>
    <url>/2023/03/07/%E6%9C%BA%E8%AF%95%E7%AC%AC3%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="快速排序-quicksort"><a href="#快速排序-quicksort" class="headerlink" title="快速排序(quicksort)"></a>快速排序(quicksort)</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> mid = a[(l + r) / <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> i = l, j = r;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[i] &lt; mid)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">while</span> (a[j] &gt; mid)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i], a[j]);</span><br><span class="line">            i++, j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; r)</span><br><span class="line">        <span class="built_in">quicksort</span>(a, i, r);</span><br><span class="line">    <span class="keyword">if</span> (l &lt; j)</span><br><span class="line">        <span class="built_in">quicksort</span>(a, l, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="结构体排序"><a href="#结构体排序" class="headerlink" title="结构体排序"></a>结构体排序</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> student &amp;a, <span class="type">const</span> student &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x == b.x)</span><br><span class="line">        <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> n, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &lt; target)</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &gt; target)</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">lower_bound</span>(begin, end, val); <span class="comment">// 返回大于等于val的地址</span></span><br><span class="line"><span class="built_in">upper_bound</span>(begin, end, val); <span class="comment">// 返回大于val的地址</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>排序和查找</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第4章</title>
    <url>/2023/03/07/%E6%9C%BA%E8%AF%95%E7%AC%AC4%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="string常用操作"><a href="#string常用操作" class="headerlink" title="string常用操作"></a>string常用操作</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">s.<span class="built_in">insert</span>(idx, str);</span><br><span class="line">s.<span class="built_in">erase</span>(begin, end); <span class="comment">// 删除[begin, end)</span></span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line">s.<span class="built_in">substr</span>(idx, len); <span class="comment">// 起始位置，长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">find</span>(str) != string::npos)</span><br></pre></td></tr></table></figure></div>

<h2 id="浮点数加法（类似大数加法）"><a href="#浮点数加法（类似大数加法）" class="headerlink" title="浮点数加法（类似大数加法）"></a>浮点数加法（类似大数加法）</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">add</span><span class="params">(string s1, string s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string int1 = s1.<span class="built_in">substr</span>(<span class="number">0</span>, s1.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>)), int2 = s2.<span class="built_in">substr</span>(<span class="number">0</span>, s2.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    string frac1 = s1.<span class="built_in">substr</span>(s1.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>) + <span class="number">1</span>), frac2 = s2.<span class="built_in">substr</span>(s2.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (int1.<span class="built_in">size</span>() &lt; int2.<span class="built_in">size</span>())</span><br><span class="line">        int1 = <span class="built_in">string</span>(int2.<span class="built_in">size</span>() - int1.<span class="built_in">size</span>(), <span class="string">&#x27;0&#x27;</span>) + int1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        int2 = <span class="built_in">string</span>(int1.<span class="built_in">size</span>() - int2.<span class="built_in">size</span>(), <span class="string">&#x27;0&#x27;</span>) + int2;</span><br><span class="line">    <span class="keyword">if</span> (frac1.<span class="built_in">size</span>() &lt; frac2.<span class="built_in">size</span>())</span><br><span class="line">        frac1 = frac1 + <span class="built_in">string</span>(frac2.<span class="built_in">size</span>() - frac1.<span class="built_in">size</span>(), <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        frac2 = frac2 + <span class="built_in">string</span>(frac1.<span class="built_in">size</span>() - frac2.<span class="built_in">size</span>(), <span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    string fraction = <span class="built_in">string</span>(frac1.<span class="built_in">size</span>(), <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = fraction.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cur = frac1[i] - <span class="string">&#x27;0&#x27;</span> + frac2[i] - <span class="string">&#x27;0&#x27;</span> + carry;</span><br><span class="line">        carry = cur / <span class="number">10</span>;</span><br><span class="line">        fraction[i] = cur % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    string integer = <span class="built_in">string</span>(int1.<span class="built_in">size</span>(), <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = integer.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cur = int1[i] - <span class="string">&#x27;0&#x27;</span> + int2[i] - <span class="string">&#x27;0&#x27;</span> + carry;</span><br><span class="line">        carry = cur / <span class="number">10</span>;</span><br><span class="line">        integer[i] = cur % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span> + integer + <span class="string">&#x27;.&#x27;</span> + fraction;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> integer + <span class="string">&#x27;.&#x27;</span> + fraction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="kmp算法"><a href="#kmp算法" class="headerlink" title="kmp算法"></a>kmp算法</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> s[MAXN], t[MAXM];</span><br><span class="line"><span class="type">int</span> nxt[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getnxt</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; m)</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || t[i] == t[j])</span><br><span class="line">            nxt[++i] = ++j;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = nxt[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kmp</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">getnxt</span>(m);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == t[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++, j++;</span><br><span class="line">            <span class="keyword">if</span> (j == m)</span><br><span class="line">                <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = nxt[j];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>机试第5章</title>
    <url>/2023/03/07/%E6%9C%BA%E8%AF%95%E7%AC%AC5%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="约瑟夫问题变体（队列解法）"><a href="#约瑟夫问题变体（队列解法）" class="headerlink" title="约瑟夫问题变体（队列解法）"></a>约瑟夫问题变体（队列解法）</h2><p>用队列模拟循环队列</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, p, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; p &gt;&gt; m;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    q.<span class="built_in">push</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; p; ++i) <span class="comment">// 让p号位于队首</span></span><br><span class="line">&#123;</span><br><span class="line">    q.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (q.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="括号匹配（栈）"><a href="#括号匹配（栈）" class="headerlink" title="括号匹配（栈）"></a>括号匹配（栈）</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; stk;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            stk.<span class="built_in">push</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!stk.<span class="built_in">empty</span>())</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="简易计算器（栈）"><a href="#简易计算器（栈）" class="headerlink" title="简易计算器（栈）"></a>简易计算器（栈）</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>机试</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
